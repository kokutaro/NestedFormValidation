@page "/"

<PageTitle>Index</PageTitle>

@code
{
    private readonly PersonDto _person;
    private readonly EditContext _editContext;
    private readonly ValidationMessageStore _messageStore;
    private FluentValidationValidator? _fluentValidationValidator;
    private ValidationErrorFinder _validationErrorFinder = default!;
    private string? _editText;

    private string[] _placeHolders =
    {
        "Test",
        "Name"
    };

    public Index()
    {
        _person = new PersonDto();
        _editContext = new EditContext(_person);
        _messageStore = new ValidationMessageStore(_editContext);
        _editContext.OnValidationStateChanged += (_, _) => StateHasChanged();
        _editContext.OnFieldChanged += (_, _) => _messageStore.Clear();
    }

    private Dictionary<string, List<Expression<Func<object>>>> FieldAccessors => new()
    {
        [nameof(AddressForm)] = new List<Expression<Func<object>>>
        {
            () => _person.AddressDto.AddressLine1!,
            () => _person.AddressDto.AddressLine2!
        },
        [nameof(TestForm)] = new List<Expression<Func<object>>>
        {
            () => _person.TestDto.Messages
        }
    };

    private void OnSubmit()
    {
        var messages = _dataValidatorService.GetValidationMessages();
        foreach (var (fieldName, errors) in messages)
        {
            var field = _editContext.Field(fieldName);
            Console.WriteLine($"FieldModel: {field.Model.ToString()}, FieldName: {field.FieldName}, Message: {errors.Aggregate((a, c) => $"{a},{c}")}");
            _messageStore.Add(_editContext.Field(fieldName), errors);
        }
        _editContext.NotifyValidationStateChanged();
        StateHasChanged();
    }

    private void OnInvalidSubmit()
    {
        _snackbar.Add("Error", Severity.Error);
    }


    private Task<IEnumerable<PersonDto>> SearchFunc(string arg)
    {
        return Task.FromResult(PersonDto.GetMockData()
            .Where(x => x.UserCode!.Contains(arg) || x.PersonName!.Contains(arg)));
    }
    private PersonDto? _searchPerson;

    private IEnumerable<IEnumerable<Word>> GetFormattedLines()
    {
        return from line in _editText?.Split("\n") ?? Array.Empty<string>() select GetFormattedText(line);
    }

    private static IEnumerable<Word> GetFormattedText(string text)
    {
        var isWithinPlaceHolder = false;
        var buf = new List<char>();
        var pBuf = new List<char>();

        for (var i = 0; i < text?.Length; i++)
        {
            var ch = text[i];
            if (ch == '{')
            {
                isWithinPlaceHolder = true;
                yield return new Word(new string(buf.ToArray()), false);
                buf.Clear();
            }
            if (isWithinPlaceHolder && ch != '}' && ch != '{')
            {
                pBuf.Add(ch);
            }
            if (isWithinPlaceHolder && ch == '}')
            {
                yield return new Word(new string(pBuf.ToArray()), true);
                pBuf.Clear();
                isWithinPlaceHolder = false;
            }
            if (!isWithinPlaceHolder && ch != '}' && ch != '{')
            {
                buf.Add(ch);
            }
        }

        if (buf.Any())
        {
            yield return new Word(new string(buf.ToArray()), false);
        }
    }

    public record Word(string Text, bool IsPlaceHolder);

    private Color GetChipColor(string text)
    {
        if (_placeHolders.Contains(text))
        {
            return Color.Default;
        }

        return Color.Error;
    }
}

<CascadingValue Value="@_person">
    <EditForm EditContext="@_editContext" OnValidSubmit="@OnSubmit" OnInvalidSubmit="@OnInvalidSubmit">
        <FluentValidationValidator @ref="@_fluentValidationValidator"/>
        <ValidationErrorFinder FieldAccessors="@FieldAccessors" @ref="@_validationErrorFinder"/>
        <MudAutocomplete T="@(PersonDto?)" Variant="@Variant.Outlined" Margin="@Margin.Dense" @bind-Value="@_searchPerson" SearchFunc="@SearchFunc" ToStringFunc="@(p => p is null ? "" : $"{p.UserCode}: {p.PersonName}")"/>
        <MudTextField Variant="@Variant.Outlined" Margin="@Margin.Dense" @bind-Value="@_person.PersonName" Label="PersonName" For="@(() => _person.PersonName)"/>
        <MudTabs PanelClass="pa-2" ApplyEffectsToContainer="@true" Elevation="2" Rounded="@true">
            <MudTabPanel Text="Address" BadgeColor="@_validationErrorFinder.GetBadgeColor(nameof(AddressForm))" BadgeData="@_validationErrorFinder.GetBadgeText(nameof(AddressForm))">
                <AddressForm/>
            </MudTabPanel>
            <MudTabPanel Text="Test" BadgeColor="@_validationErrorFinder.GetBadgeColor(nameof(TestForm))" BadgeData="@_validationErrorFinder.GetBadgeText(nameof(TestForm))">
                <TestForm/>
            </MudTabPanel>
        </MudTabs>
        <MudTextField @bind-Value="@_editText" Immediate="@true" Label="Text" Lines="5" Margin="@Margin.Dense" Variant="@Variant.Outlined"/>
        <div>
            @foreach (var lines in GetFormattedLines())
            {
                <div>
                    @foreach (var (text, isPlaceHolder) in lines)
                    {
                        @if (isPlaceHolder)
                        {
                            <MudChip Size="@Size.Small" Color="@GetChipColor(text)" Label="@true">@text</MudChip>
                        }
                        else
                        {
                            <span>@text</span>
                        }
                    }
                </div>
            }
        </div>
        <MudButton Class="mt-2" ButtonType="@ButtonType.Submit" Color="@Color.Primary" Variant="@Variant.Filled">Submit</MudButton>
    </EditForm>
</CascadingValue>