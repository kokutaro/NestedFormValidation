@typeparam TValue
@inherits ComponentBase
@implements IDisposable

@code {
    private EditContext? _previousEditContext;
    private Expression<Func<TValue>>? _previousFieldAccessor;
    private readonly EventHandler<ValidationStateChangedEventArgs>? _validationStateChangedHandler;
    private FieldIdentifier _fieldIdentifier;

    [CascadingParameter]
    public EditContext CurrentEditContext { get; set; } = default!;

    [Parameter]
    public Expression<Func<TValue>>? For { get; set; }

    public ValidationError()
    {
        _validationStateChangedHandler = (_, _) => StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        if (CurrentEditContext == null)
        {
            throw new InvalidOperationException($"{GetType()} requires a cascading parameter " +
                                                $"of type {nameof(EditContext)}. For example, you can use {GetType()} inside " +
                                                $"an {nameof(EditForm)}.");
        }

        if (For == null) // Not possible except if you manually specify T
        {
            throw new InvalidOperationException($"{GetType()} requires a value for the " +
                                                $"{nameof(For)} parameter.");
        }
        if (For != _previousFieldAccessor)
        {
            _fieldIdentifier = FieldIdentifier.Create(For);
            _previousFieldAccessor = For;
        }

        if (CurrentEditContext == _previousEditContext)
        {
            return;
        }

        DetachValidationStateChangedListener();
        CurrentEditContext.OnValidationStateChanged += _validationStateChangedHandler;
        _previousEditContext = CurrentEditContext;
    }

    protected virtual void Dispose(bool disposing)
    {
    }

    void IDisposable.Dispose()
    {
        DetachValidationStateChangedListener();
        Dispose(disposing: true);
    }

    private void DetachValidationStateChangedListener()
    {
        if (_previousEditContext != null)
        {
            _previousEditContext.OnValidationStateChanged -= _validationStateChangedHandler;
        }
    }

}

@foreach (var message in CurrentEditContext.GetValidationMessages(_fieldIdentifier))
{
    <MudText Typo="@Typo.body2" Color="@Color.Error">@message</MudText>
}